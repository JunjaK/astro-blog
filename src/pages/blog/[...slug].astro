---
import { type CollectionEntry, getCollection } from 'astro:content';
import MdLayout from '../../layouts/mdLayout.astro';

export async function getStaticPaths() {
  const posts = await getCollection('blog');
  return posts.map((post, index) => ({
    params: { slug: post.slug },
    props: {
      post,
      prev: posts[index - 1] || null,
      next: posts[index + 1] || null,
    },
  }));
}
type Props = {
  post: CollectionEntry<'blog'>;
  prev: CollectionEntry<'blog'> | null;
  next: CollectionEntry<'blog'> | null;
};


const { post, prev, next } = Astro.props;
const { Content } = await post.render();
---

<MdLayout post={post.data} nav={{ prev, next }} url={`/blog/${post.slug}`}>
  <Content />
</MdLayout>


<script>
import mermaid from 'mermaid';

function saveOriginalData() {
  return new Promise<void>((resolve, reject) => {
    try {
      const els = document.querySelectorAll('.language-mermaid');
      let count = els.length;
      els.forEach((element) => {
        if (element.getAttribute('data-original-code') == null) {
          element.setAttribute('data-original-code', element.innerHTML);
        }
        count--;
        if (count == 0) {
          resolve();
        }
      });
    }
    catch (error) {
      reject(error);
    }
  });
}

function resetProcessed() {
  return new Promise<void>((resolve, reject) => {
    try {
      const els = document.querySelectorAll('.language-mermaid');
      let count = els.length;
      els.forEach((element) => {
        if (element.getAttribute('data-original-code') != null) {
          element.removeAttribute('data-processed');
          element.innerHTML
            = element.getAttribute('data-original-code') ?? '';
        }
        count--;
        if (count == 0) {
          resolve();
        }
      });
    }
    catch (error) {
      reject(error);
    }
  });
}
async function loadMermaid(theme: string) {
  mermaid.initialize({
    startOnLoad: false,
    theme,
  });
  await mermaid.run({
    querySelector: '.language-mermaid',
  });
}
function themeSetHandler(e: any) {
  let theme = e.detail.theme;
  if (e.detail.theme === 'light') {
    theme = 'default';
  }
  else if (e.detail.theme === 'auto') {
    theme = window.matchMedia('(prefers-color-scheme: dark)').matches
      ? 'dark'
      : 'default';
  }
  saveOriginalData()
    .then(() => {
      resetProcessed();
    })
    .then(() => {
      loadMermaid(theme);
    })
    .catch(console.error);
}
function mermaidInit() {
  document.body.removeEventListener('theme-set', themeSetHandler);
  document.body.addEventListener('theme-set', themeSetHandler);

  let theme = localStorage.getItem('theme');
  if (theme === '"light"') {
    theme = 'default';
  }
  else if (theme === '"auto"') {
    theme = window.matchMedia('(prefers-color-scheme: dark)').matches
      ? 'dark'
      : 'default';
  }
  else if (theme === '"dark"') {
    theme = 'dark';
  }
  else {
    theme = 'default';
  }
  if (theme === 'dark' || theme === 'default') {
    saveOriginalData()
      .then(() => {
        resetProcessed();
      })
      .then(() => {
        loadMermaid(theme);
      })
      .catch(console.error);
  }
}
document.addEventListener('astro:after-swap', mermaidInit);
mermaidInit();
</script>
